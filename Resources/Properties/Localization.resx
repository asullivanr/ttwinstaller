<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MustBeElevated" xml:space="preserve">
    <value>{0} must be run as Administrator.</value>
    <comment>{0} = TTW</comment>
  </data>
  <data name="TTW" xml:space="preserve">
    <value>Tale of Two Wastelands</value>
  </data>
  <data name="BuildFOMODsPrompt" xml:space="preserve">
    <value>{0} is easiest to install via a mod manager like {1}. Manual installation is possible but not suggested.

Would like the installer to automatically build FOMODs?</value>
    <comment>{0} = TTW, {1} = SuggestedModManager</comment>
  </data>
  <data name="SuggestedModManager" xml:space="preserve">
    <value>FOMM</value>
  </data>
  <data name="BuildFOMODsQuestion" xml:space="preserve">
    <value>Build FOMODs?</value>
  </data>
  <data name="InstalledSuccessfully" xml:space="preserve">
    <value>{0} has been installed successfully.</value>
    <comment>{0} = TTW</comment>
  </data>
  <data name="Fallout3" xml:space="preserve">
    <value>Fallout 3</value>
  </data>
  <data name="FalloutNewVegas" xml:space="preserve">
    <value>Fallout New Vegas</value>
  </data>
  <data name="UncaughtExceptionMessage" xml:space="preserve">
    <value>An uncaught exception occurred and the program will now exit. Please submit a crash report with your installation log.</value>
  </data>
  <data name="ErrorWhilePatching" xml:space="preserve">
    <value>Errors occurred while patching {0}</value>
    <comment>{0} = BSA name</comment>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="RebuildPrompt" xml:space="preserve">
    <value>{0} already exists. Rebuild?</value>
    <comment>{0} = out BSA filename</comment>
  </data>
  <data name="FileAlreadyExistsTitle" xml:space="preserve">
    <value>File Already Exists</value>
  </data>
  <data name="ErrorWhileInstalling" xml:space="preserve">
    <value>An error occurred while installing:
{0}</value>
    <comment>{0} = ex.Message</comment>
  </data>
  <data name="OverwriteFiles" xml:space="preserve">
    <value>Overwrite Files</value>
  </data>
  <data name="AlreadyExistOverwritePrompt" xml:space="preserve">
    <value>{0} already exist. Would you like to overwrite them?</value>
    <comment>{0} = description</comment>
  </data>
  <data name="Install" xml:space="preserve">
    <value>Install</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CancelingWait" xml:space="preserve">
    <value>Canceling...</value>
  </data>
  <data name="RightSaidFred" xml:space="preserve">
    <value>Impossible</value>
  </data>
  <data name="Extracting" xml:space="preserve">
    <value>Extracting {0}</value>
  </data>
  <data name="FailedDownloadNvse" xml:space="preserve">
    <value>Failed to download NVSE.</value>
  </data>
  <data name="FailedExtractNvse" xml:space="preserve">
    <value>Failed to extract NVSE.</value>
  </data>
  <data name="InstallCancelledNvse" xml:space="preserve">
    <value>Install cancelled due to NVSE requirement</value>
  </data>
  <data name="Invalid7zArchive" xml:space="preserve">
    <value>{0} is an invalid 7z archive.</value>
  </data>
  <data name="NvseFound" xml:space="preserve">
    <value>NVSE found</value>
  </data>
  <data name="NvseInstallPrompt" xml:space="preserve">
    <value>New Vegas Script Extender (NVSE) was not found, but is required to play A Tale of Two Wastelands.

Would you like to install NVSE?</value>
  </data>
  <data name="NvseInstallSuccessful" xml:space="preserve">
    <value>NVSE was installed successfully.</value>
  </data>
  <data name="NvseMissing" xml:space="preserve">
    <value>NVSE missing</value>
  </data>
  <data name="NvseMustBeInstalled" xml:space="preserve">
    <value>NVSE must be installed before playing!</value>
  </data>
  <data name="ParsedNvseLink" xml:space="preserve">
    <value>Parsed NVSE link: {0}</value>
  </data>
  <data name="ProceedingWithoutNvse" xml:space="preserve">
    <value>Proceeding without NVSE.</value>
  </data>
  <data name="RequestingNvsePage" xml:space="preserve">
    <value>Requesting NVSE page at {0}</value>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>File "{0}" does not exist</value>
  </data>
  <data name="FileAlreadyExists" xml:space="preserve">
    <value>File "{0}" already exists</value>
  </data>
  <data name="FailedToSavePath" xml:space="preserve">
    <value>Failed to save path "{0}" to {1}</value>
  </data>
  <data name="CheckingRequiredFiles" xml:space="preserve">
    <value>Checking for required files</value>
  </data>
</root>